local function bit_and(a, b)
	local result = 0
	local d = 256
	while d >=1 do
		d = d/2
		local aa,bb = a-d, b-d
		local aaa,bbb = aa>=0, bb>=0
		if aaa and bbb then result = result + d end
		if aaa then a = aa end
		if bbb then b = bb end
	end
	return result
end


local function bit_or(a, b)
	local result = 0
	local d = 256
	while d >=1 do
		d = d/2
		local aa,bb = a-d, b-d
		local aaa,bbb = aa>=0, bb>=0
		if aaa or bbb then result = result + d end
		if aaa then a = aa end
		if bbb then b = bb end
	end
	return result
end


local function bit_xor(a, b)
	local result = 0
	local d = 256
	while d >=1 do
		d = d/2
		local aa,bb = a-d, b-d
		local aaa,bbb = aa>=0, bb>=0
		if aaa ~= bbb then result = result + d end
		if aaa then a = aa end
		if bbb then b = bb end
	end
	return result
end


-- BLITZ, best game ever!
 game_data = {18, 23, 66, 76, 73, 84, 90, 32, 66, 121, 32, 68, 97, 118, 105, 100, 32, 87, 73, 78, 84, 69, 82, 163, 65, 96, 4, 97, 9, 98, 14, 103, 4, 208, 30, 242, 30, 112, 12, 48, 64, 18, 33, 240, 10, 0, 224, 34, 217, 240, 10, 0, 224, 142, 112, 163, 30, 107, 31, 204, 31, 140, 196, 220, 178, 63, 1, 18, 73, 220, 178, 18, 57, 202, 7, 122, 1, 123, 254, 220, 178, 122, 255, 58, 0, 18, 77, 126, 255, 62, 0, 18, 57, 107, 0, 140, 112, 109, 0, 110, 0, 163, 27, 221, 227, 63, 0, 18, 193, 59, 0, 18, 129, 96, 5, 224, 158, 18, 135, 107, 1, 136, 208, 120, 2, 137, 224, 121, 3, 163, 30, 216, 145, 129, 240, 96, 5, 240, 21, 240, 7, 48, 0, 18, 139, 59, 1, 18, 171, 163, 30, 49, 1, 216, 145, 121, 1, 57, 32, 18, 171, 107, 0, 49, 0, 124, 255, 76, 0, 18, 187, 163, 27, 221, 227, 125, 2, 61, 64, 18, 185, 109, 0, 126, 1, 18, 101, 0, 224, 119, 2, 18, 45, 163, 27, 221, 227, 96, 20, 97, 2, 98, 11, 163, 32, 208, 27, 242, 30, 112, 8, 48, 44, 18, 205, 18, 215, 96, 10, 97, 13, 98, 5, 163, 7, 208, 21, 242, 30, 112, 8, 48, 42, 18, 225, 128, 112, 112, 254, 128, 6, 163, 135, 240, 51, 242, 101, 96, 45, 241, 41, 97, 13, 208, 21, 112, 5, 242, 41, 208, 21, 0, 238, 131, 130, 131, 130, 251, 232, 8, 136, 5, 226, 190, 160, 184, 32, 62, 128, 128, 128, 128, 248, 128, 248, 252, 192, 192, 249, 129, 219, 203, 251, 0, 250, 138, 154, 153, 248, 239, 42, 232, 41, 41, 0, 111, 104, 46, 76, 143, 190, 160, 184, 176, 190, 0, 190, 34, 62, 52, 178, 216, 216, 0, 195, 195, 0, 216, 216, 0, 195, 195, 0, 216, 216, 192, 192, 0, 192, 192, 0, 192, 192, 0, 192, 192, 0, 219, 219, 219, 219, 0, 24, 24, 0, 24, 24, 0, 24, 24, 0, 219, 219, 219, 219, 0, 24, 24, 0, 24, 24, 0, 24, 24, 0, 24, 24, 219, 219, 0, 3, 3, 0, 24, 24, 0, 192, 192, 0, 219, 219}

-- HIDDEN, a memory game. It has random bugs, don't know if it's the emulator or game
-- game_data = {18, 29, 72, 73, 68, 68, 69, 78, 33, 32, 49, 46, 48, 32, 66, 121, 32, 68, 97, 118, 105, 100, 32, 87, 73, 78, 84, 69, 82, 164, 63, 96, 0, 97, 64, 241, 85, 164, 63, 96, 0, 240, 85, 0, 224, 164, 126, 96, 12, 97, 8, 98, 15, 208, 31, 112, 8, 242, 30, 48, 52, 18, 53, 240, 10, 0, 224, 164, 201, 96, 19, 97, 13, 98, 4, 208, 20, 112, 8, 242, 30, 48, 43, 18, 75, 164, 31, 255, 101, 164, 47, 255, 85, 99, 64, 102, 8, 193, 15, 194, 15, 164, 47, 241, 30, 240, 101, 132, 0, 164, 47, 242, 30, 240, 101, 133, 0, 128, 64, 240, 85, 164, 47, 241, 30, 128, 80, 240, 85, 115, 255, 51, 0, 18, 97, 0, 224, 96, 0, 97, 0, 164, 119, 208, 23, 112, 8, 48, 32, 18, 143, 96, 0, 113, 8, 49, 32, 18, 143, 108, 0, 109, 0, 110, 0, 164, 63, 240, 101, 112, 1, 240, 85, 35, 185, 106, 16, 35, 93, 35, 205, 138, 144, 135, 208, 136, 224, 35, 93, 35, 205, 35, 185, 164, 47, 249, 30, 240, 101, 129, 0, 164, 47, 250, 30, 240, 101, 80, 16, 19, 43, 35, 223, 96, 32, 36, 1, 35, 223, 96, 0, 164, 47, 249, 30, 240, 85, 164, 47, 250, 30, 240, 85, 118, 255, 54, 0, 18, 165, 164, 63, 241, 101, 130, 0, 128, 21, 63, 0, 19, 1, 128, 32, 129, 32, 241, 85, 0, 224, 165, 25, 96, 16, 97, 7, 98, 14, 208, 31, 112, 8, 242, 30, 48, 48, 19, 11, 164, 63, 241, 101, 132, 16, 131, 0, 102, 9, 36, 11, 102, 15, 131, 64, 36, 11, 240, 10, 18, 37, 35, 219, 96, 128, 36, 1, 35, 219, 164, 47, 250, 30, 240, 101, 112, 255, 35, 243, 164, 65, 240, 30, 215, 135, 164, 119, 215, 135, 164, 47, 249, 30, 240, 101, 112, 255, 35, 243, 164, 65, 240, 30, 221, 231, 164, 119, 221, 231, 18, 165, 164, 113, 221, 231, 251, 10, 221, 231, 59, 4, 19, 113, 77, 0, 19, 93, 125, 248, 124, 255, 59, 6, 19, 125, 77, 24, 19, 93, 125, 8, 124, 1, 59, 2, 19, 137, 78, 0, 19, 93, 126, 248, 124, 252, 59, 8, 19, 149, 78, 24, 19, 93, 126, 8, 124, 4, 59, 5, 19, 93, 164, 47, 252, 30, 240, 101, 64, 0, 19, 93, 137, 192, 153, 160, 19, 93, 112, 255, 164, 119, 221, 231, 164, 65, 35, 243, 240, 30, 221, 231, 0, 238, 164, 213, 96, 36, 97, 10, 98, 11, 208, 27, 112, 8, 242, 30, 48, 60, 19, 193, 0, 238, 96, 52, 97, 16, 164, 241, 208, 21, 164, 246, 208, 21, 0, 238, 164, 251, 19, 225, 165, 10, 96, 36, 97, 13, 98, 5, 208, 21, 112, 8, 242, 30, 48, 60, 19, 231, 0, 238, 129, 0, 129, 20, 128, 4, 128, 4, 128, 4, 128, 21, 0, 238, 240, 21, 240, 7, 48, 0, 20, 3, 0, 238, 164, 47, 243, 51, 242, 101, 101, 35, 241, 41, 213, 101, 101, 40, 242, 41, 213, 101, 0, 238, 1, 2, 3, 4, 8, 7, 6, 5, 5, 6, 7, 8, 4, 3, 2, 1, 1, 2, 3, 4, 8, 7, 6, 5, 5, 6, 7, 8, 4, 3, 2, 1, 0, 0, 254, 238, 198, 130, 198, 238, 254, 254, 198, 198, 198, 254, 254, 198, 170, 130, 170, 198, 254, 198, 130, 130, 130, 198, 254, 186, 214, 238, 214, 186, 254, 238, 238, 130, 238, 238, 254, 130, 254, 130, 254, 130, 254, 170, 170, 170, 170, 170, 254, 254, 254, 254, 254, 254, 254, 170, 214, 170, 214, 170, 254, 139, 136, 248, 136, 139, 0, 0, 0, 0, 0, 240, 72, 72, 72, 242, 239, 132, 132, 132, 239, 0, 8, 8, 10, 0, 138, 138, 170, 170, 82, 60, 146, 146, 146, 60, 0, 226, 163, 227, 0, 139, 200, 168, 152, 136, 250, 131, 226, 130, 250, 0, 40, 184, 144, 0, 239, 136, 142, 136, 143, 33, 33, 161, 96, 33, 0, 0, 0, 0, 0, 188, 34, 60, 40, 164, 137, 138, 171, 82, 151, 81, 209, 81, 192, 0, 0, 21, 106, 138, 142, 138, 106, 0, 100, 138, 142, 138, 106, 68, 170, 170, 170, 68, 0, 204, 170, 202, 170, 172, 110, 136, 76, 40, 206, 0, 4, 12, 4, 4, 14, 12, 18, 4, 8, 30, 99, 148, 148, 148, 99, 56, 165, 184, 160, 33, 225, 1, 193, 32, 193, 137, 138, 82, 34, 33, 207, 40, 47, 40, 200, 2, 130, 2, 0, 2, 255, 128, 143, 144, 142, 129, 158, 128, 145, 145, 159, 145, 145, 128, 255, 0, 60, 64, 64, 64, 60, 0, 124, 16, 16, 16, 124, 0, 255, 0, 0, 128, 0, 128, 0, 0, 0, 128, 0, 128, 0, 0, 255, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 255}

-- Good breakout clone, shows again that display needs to improve
-- game_data = {110, 5, 101, 0, 107, 6, 106, 0, 163, 12, 218, 177, 122, 4, 58, 64, 18, 8, 123, 2, 59, 18, 18, 6, 108, 32, 109, 31, 163, 16, 220, 209, 34, 246, 96, 0, 97, 0, 163, 18, 208, 17, 112, 8, 163, 14, 208, 17, 96, 64, 240, 21, 240, 7, 48, 0, 18, 52, 198, 15, 103, 30, 104, 1, 105, 255, 163, 14, 214, 113, 163, 16, 220, 209, 96, 4, 224, 161, 124, 254, 96, 6, 224, 161, 124, 2, 96, 63, 140, 2, 220, 209, 163, 14, 214, 113, 134, 132, 135, 148, 96, 63, 134, 2, 97, 31, 135, 18, 71, 31, 18, 172, 70, 0, 104, 1, 70, 63, 104, 255, 71, 0, 105, 1, 214, 113, 63, 1, 18, 170, 71, 31, 18, 170, 96, 5, 128, 117, 63, 0, 18, 170, 96, 1, 240, 24, 128, 96, 97, 252, 128, 18, 163, 12, 208, 113, 96, 254, 137, 3, 34, 246, 117, 1, 34, 246, 69, 96, 18, 222, 18, 70, 105, 255, 128, 96, 128, 197, 63, 1, 18, 202, 97, 2, 128, 21, 63, 1, 18, 224, 128, 21, 63, 1, 18, 238, 128, 21, 63, 1, 18, 232, 96, 32, 240, 24, 163, 14, 126, 255, 128, 224, 128, 4, 97, 0, 208, 17, 62, 0, 18, 48, 18, 222, 120, 255, 72, 254, 104, 255, 18, 238, 120, 1, 72, 2, 104, 1, 96, 4, 240, 24, 105, 255, 18, 112, 163, 20, 245, 51, 242, 101, 241, 41, 99, 55, 100, 0, 211, 69, 115, 5, 242, 41, 211, 69, 0, 238, 224, 0, 128, 0, 252, 0, 170, 0, 0, 0, 0, 0}

-- 15 game
-- game_data = {0, 224, 108, 0, 76, 0, 110, 15, 162, 3, 96, 32, 240, 85, 0, 224, 34, 190, 34, 118, 34, 142, 34, 94, 34, 70, 18, 16, 97, 0, 98, 23, 99, 4, 65, 16, 0, 238, 162, 232, 241, 30, 240, 101, 64, 0, 18, 52, 240, 41, 210, 53, 113, 1, 114, 5, 100, 3, 132, 18, 52, 0, 18, 34, 98, 23, 115, 6, 18, 34, 100, 3, 132, 226, 101, 3, 133, 210, 148, 80, 0, 238, 68, 3, 0, 238, 100, 1, 132, 228, 34, 166, 18, 70, 100, 3, 132, 226, 101, 3, 133, 210, 148, 80, 0, 238, 68, 0, 0, 238, 100, 255, 132, 228, 34, 166, 18, 94, 100, 12, 132, 226, 101, 12, 133, 210, 148, 80, 0, 238, 68, 0, 0, 238, 100, 252, 132, 228, 34, 166, 18, 118, 100, 12, 132, 226, 101, 12, 133, 210, 148, 80, 0, 238, 68, 12, 0, 238, 100, 4, 132, 228, 34, 166, 18, 142, 162, 232, 244, 30, 240, 101, 162, 232, 254, 30, 240, 85, 96, 0, 162, 232, 244, 30, 240, 85, 142, 64, 0, 238, 60, 0, 18, 210, 34, 28, 34, 216, 34, 28, 162, 248, 253, 30, 240, 101, 141, 0, 0, 238, 124, 255, 205, 15, 0, 238, 125, 1, 96, 15, 141, 2, 237, 158, 18, 216, 237, 161, 18, 226, 0, 238, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 13, 0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 14, 3, 7, 11, 15, 132, 228, 34, 166, 18, 118, 100, 12, 132, 226, 101, 12, 133, 210, 148, 80, 0, 238, 68, 12, 0, 238, 100, 4, 132, 228, 34, 166, 18, 142, 162, 232, 244, 30, 240, 101, 162, 232, 254, 30, 240, 85, 96, 0, 162, 232, 244, 30, 240, 85, 142, 64, 0, 238, 60, 0, 18, 210, 34, 28, 34, 216, 34, 28, 162, 248, 253, 30, 240, 101, 141, 0, 0, 238, 124, 255, 205, 15, 0, 238, 125, 1, 96, 15, 141, 2, 237, 158, 18, 216, 237, 161, 18, 226, 0, 238, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0, 13, 0, 1, 2, 4, 5, 6, 8}

-- Space Invaders
-- game_data = {18, 37, 83, 80, 65, 67, 69, 32, 73, 78, 86, 65, 68, 69, 82, 83, 32, 118, 48, 46, 57, 32, 66, 121, 32, 68, 97, 118, 105, 100, 32, 87, 73, 78, 84, 69, 82, 96, 0, 97, 0, 98, 8, 163, 211, 208, 24, 113, 8, 242, 30, 49, 32, 18, 45, 112, 8, 97, 0, 48, 64, 18, 45, 105, 5, 108, 21, 110, 0, 35, 135, 96, 10, 240, 21, 240, 7, 48, 0, 18, 75, 35, 135, 126, 1, 18, 69, 102, 0, 104, 28, 105, 0, 106, 4, 107, 10, 108, 4, 109, 60, 110, 15, 0, 224, 35, 107, 35, 71, 253, 21, 96, 4, 224, 158, 18, 125, 35, 107, 56, 0, 120, 255, 35, 107, 96, 6, 224, 158, 18, 139, 35, 107, 56, 57, 120, 1, 35, 107, 54, 0, 18, 159, 96, 5, 224, 158, 18, 233, 102, 1, 101, 27, 132, 128, 163, 207, 212, 81, 163, 207, 212, 81, 117, 255, 53, 255, 18, 173, 102, 0, 18, 233, 212, 81, 63, 1, 18, 233, 212, 81, 102, 0, 131, 64, 115, 3, 131, 181, 98, 248, 131, 34, 98, 8, 51, 0, 18, 201, 35, 115, 130, 6, 67, 8, 18, 211, 51, 16, 18, 213, 35, 115, 130, 6, 51, 24, 18, 221, 35, 115, 130, 6, 67, 32, 18, 231, 51, 40, 18, 233, 35, 115, 62, 0, 19, 7, 121, 6, 73, 24, 105, 0, 106, 4, 107, 10, 108, 4, 125, 244, 110, 15, 0, 224, 35, 71, 35, 107, 253, 21, 18, 111, 247, 7, 55, 0, 18, 111, 253, 21, 35, 71, 139, 164, 59, 18, 19, 27, 124, 2, 106, 252, 59, 2, 19, 35, 124, 2, 106, 4, 35, 71, 60, 24, 18, 111, 0, 224, 164, 211, 96, 20, 97, 8, 98, 15, 208, 31, 112, 8, 242, 30, 48, 44, 19, 51, 240, 10, 0, 224, 166, 244, 254, 101, 18, 37, 163, 183, 249, 30, 97, 8, 35, 95, 129, 6, 35, 95, 129, 6, 35, 95, 129, 6, 35, 95, 123, 208, 0, 238, 128, 224, 128, 18, 48, 0, 219, 198, 123, 12, 0, 238, 163, 207, 96, 28, 216, 4, 0, 238, 35, 71, 142, 35, 35, 71, 96, 5, 240, 24, 240, 21, 240, 7, 48, 0, 19, 127, 0, 238, 106, 0, 141, 224, 107, 4, 233, 161, 18, 87, 166, 2, 253, 30, 240, 101, 48, 255, 19, 165, 106, 0, 107, 4, 109, 1, 110, 1, 19, 141, 165, 0, 240, 30, 219, 198, 123, 8, 125, 1, 122, 1, 58, 7, 19, 141, 0, 238, 60, 126, 255, 255, 153, 153, 126, 255, 255, 36, 36, 231, 126, 255, 60, 60, 126, 219, 129, 66, 60, 126, 255, 219, 16, 56, 124, 254, 0, 0, 127, 0, 63, 0, 127, 0, 0, 0, 1, 1, 1, 3, 3, 3, 3, 0, 0, 63, 32, 32, 32, 32, 32, 32, 32, 32, 63, 8, 8, 255, 0, 0, 254, 0, 252, 0, 254, 0, 0, 0, 126, 66, 66, 98, 98, 98, 98, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 125, 0, 65, 125, 5, 125, 125, 0, 0, 194, 194, 198, 68, 108, 40, 56, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 247, 16, 20, 247, 247, 4, 4, 0, 0, 124, 68, 254, 194, 194, 194, 194, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 239, 32, 40, 232, 232, 47, 47, 0, 0, 249, 133, 197, 197, 197, 197, 249, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 190, 0, 32, 48, 32, 190, 190, 0, 0, 247, 4, 231, 133, 133, 132, 244, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 0, 127, 0, 63, 0, 127, 0, 0, 0, 239, 40, 239, 0, 224, 96, 111, 0, 0, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 0, 0, 255, 0, 0, 254, 0, 252, 0, 254, 0, 0, 0, 192, 0, 192, 192, 192, 192, 192, 0, 0, 252, 4, 4, 4, 4, 4, 4, 4, 4, 252, 16, 16, 255, 249, 129, 185, 139, 154, 154, 250, 0, 250, 138, 154, 154, 155, 153, 248, 230, 37, 37, 244, 52, 52, 52, 0, 23, 20, 52, 55, 54, 38, 199, 223, 80, 80, 92, 216, 216, 223, 0, 223, 17, 31, 18, 27, 25, 217, 124, 68, 254, 134, 134, 134, 252, 132, 254, 130, 130, 254, 254, 128, 192, 192, 192, 254, 252, 130, 194, 194, 194, 252, 254, 128, 248, 192, 192, 254, 254, 128, 240, 192, 192, 192, 254, 128, 190, 134, 134, 254, 134, 134, 254, 134, 134, 134, 16, 16, 16, 16, 16, 16, 24, 24, 24, 72, 72, 120, 156, 144, 176, 192, 176, 156, 128, 128, 192, 192, 192, 254, 238, 146, 146, 134, 134, 134, 254, 130, 134, 134, 134, 134, 124, 130, 134, 134, 134, 124, 254, 130, 254, 192, 192, 192, 124, 130, 194, 202, 196, 122, 254, 134, 254, 144, 156, 132, 254, 192, 254, 2, 2, 254, 254, 16, 48, 48, 48, 48, 130, 130, 194, 194, 194, 254, 130, 130, 130, 238, 56, 16, 134, 134, 150, 146, 146, 238, 130, 68, 56, 56, 68, 130, 130, 130, 254, 48, 48, 48, 254, 2, 30, 240, 128, 254, 0, 0, 0, 0, 6, 6, 0, 0, 0, 96, 96, 192, 0, 0, 0, 0, 0, 0, 24, 24, 24, 24, 0, 24, 124, 198, 12, 24, 0, 24, 0, 0, 254, 254, 0, 0, 254, 130, 134, 134, 134, 254, 8, 8, 8, 24, 24, 24, 254, 2, 254, 192, 192, 254, 254, 2, 30, 6, 6, 254, 132, 196, 196, 254, 4, 4, 254, 128, 254, 6, 6, 254, 192, 192, 192, 254, 130, 254, 254, 2, 2, 6, 6, 6, 124, 68, 254, 134, 134, 254, 254, 130, 254, 6, 6, 6, 68, 254, 68, 68, 254, 68, 168, 168, 168, 168, 168, 168, 168, 108, 90, 0, 12, 24, 168, 48, 78, 126, 0, 18, 24, 102, 108, 168, 90, 102, 84, 36, 102, 0, 72, 72, 24, 18, 168, 6, 144, 168, 18, 0, 126, 48, 18, 168, 132, 48, 78, 114, 24, 102, 168, 168, 168, 168, 168, 168, 144, 84, 120, 168, 72, 120, 108, 114, 168, 18, 24, 108, 114, 102, 84, 144, 168, 114, 42, 24, 168, 48, 78, 126, 0, 18, 24, 102, 108, 168, 114, 84, 168, 90, 102, 24, 126, 24, 78, 114, 168, 114, 42, 24, 48, 102, 168, 48, 78, 126, 0, 108, 48, 84, 78, 156, 168, 168, 168, 168, 168, 168, 168, 72, 84, 126, 24, 168, 144, 84, 120, 102, 168, 108, 42, 48, 90, 168, 132, 48, 114, 42, 168, 216, 168, 0, 78, 18, 168, 228, 162, 168, 0, 78, 18, 168, 108, 42, 84, 84, 114, 168, 132, 48, 114, 42, 168, 222, 156, 168, 114, 42, 24, 168, 12, 84, 72, 90, 120, 114, 24, 102, 168, 114, 24, 66, 66, 108, 168, 114, 42, 0, 114, 168, 114, 42, 24, 168, 48, 78, 126, 0, 18, 24, 102, 108, 168, 48, 78, 12, 102, 24, 0, 108, 24, 168, 114, 42, 24, 48, 102, 168, 30, 84, 102, 12, 24, 156, 168, 36, 84, 84, 18, 168, 66, 120, 12, 60, 168, 174, 168, 168, 168, 168, 168, 168, 168, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

-- Tetris
-- game_data = {162, 180, 35, 230, 34, 182, 112, 1, 208, 17, 48, 37, 18, 6, 113, 255, 208, 17, 96, 26, 208, 17, 96, 37, 49, 0, 18, 14, 196, 112, 68, 112, 18, 28, 195, 3, 96, 30, 97, 3, 34, 92, 245, 21, 208, 20, 63, 1, 18, 60, 208, 20, 113, 255, 208, 20, 35, 64, 18, 28, 231, 161, 34, 114, 232, 161, 34, 132, 233, 161, 34, 150, 226, 158, 18, 80, 102, 0, 246, 21, 246, 7, 54, 0, 18, 60, 208, 20, 113, 1, 18, 42, 162, 196, 244, 30, 102, 0, 67, 1, 102, 4, 67, 2, 102, 8, 67, 3, 102, 12, 246, 30, 0, 238, 208, 20, 112, 255, 35, 52, 63, 1, 0, 238, 208, 20, 112, 1, 35, 52, 0, 238, 208, 20, 112, 1, 35, 52, 63, 1, 0, 238, 208, 20, 112, 255, 35, 52, 0, 238, 208, 20, 115, 1, 67, 4, 99, 0, 34, 92, 35, 52, 63, 1, 0, 238, 208, 20, 115, 255, 67, 255, 99, 3, 34, 92, 35, 52, 0, 238, 128, 0, 103, 5, 104, 6, 105, 4, 97, 31, 101, 16, 98, 7, 0, 238, 64, 224, 0, 0, 64, 192, 64, 0, 0, 224, 64, 0, 64, 96, 64, 0, 64, 64, 96, 0, 32, 224, 0, 0, 192, 64, 64, 0, 0, 224, 128, 0, 64, 64, 192, 0, 0, 224, 32, 0, 96, 64, 64, 0, 128, 224, 0, 0, 64, 192, 128, 0, 192, 96, 0, 0, 64, 192, 128, 0, 192, 96, 0, 0, 128, 192, 64, 0, 0, 96, 192, 0, 128, 192, 64, 0, 0, 96, 192, 0, 192, 192, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 192, 192, 0, 0, 64, 64, 64, 64, 0, 240, 0, 0, 64, 64, 64, 64, 0, 240, 0, 0, 208, 20, 102, 53, 118, 255, 54, 0, 19, 56, 0, 238, 162, 180, 140, 16, 60, 30, 124, 1, 60, 30, 124, 1, 60, 30, 124, 1, 35, 94, 75, 10, 35, 114, 145, 192, 0, 238, 113, 1, 19, 80, 96, 27, 107, 0, 208, 17, 63, 0, 123, 1, 208, 17, 112, 1, 48, 37, 19, 98, 0, 238, 96, 27, 208, 17, 112, 1, 48, 37, 19, 116, 142, 16, 141, 224, 126, 255, 96, 27, 107, 0, 208, 225, 63, 0, 19, 144, 208, 225, 19, 148, 208, 209, 123, 1, 112, 1, 48, 37, 19, 134, 75, 0, 19, 166, 125, 255, 126, 255, 61, 1, 19, 130, 35, 192, 63, 1, 35, 192, 122, 1, 35, 192, 128, 160, 109, 7, 128, 210, 64, 4, 117, 254, 69, 2, 101, 4, 0, 238, 167, 0, 242, 85, 168, 4, 250, 51, 242, 101, 240, 41, 109, 50, 110, 0, 221, 229, 125, 5, 241, 41, 221, 229, 125, 5, 242, 41, 221, 229, 167, 0, 242, 101, 162, 180, 0, 238, 106, 0, 96, 25, 0, 238, 55, 35}

-- UFO something
-- game_data = {162, 205, 105, 56, 106, 8, 217, 163, 162, 208, 107, 0, 108, 3, 219, 195, 162, 214, 100, 29, 101, 31, 212, 81, 103, 0, 104, 15, 34, 162, 34, 172, 72, 0, 18, 34, 100, 30, 101, 28, 162, 211, 212, 83, 110, 0, 102, 128, 109, 4, 237, 161, 102, 255, 109, 5, 237, 161, 102, 0, 109, 6, 237, 161, 102, 1, 54, 128, 34, 216, 162, 208, 219, 195, 205, 1, 139, 212, 219, 195, 63, 0, 18, 146, 162, 205, 217, 163, 205, 1, 61, 0, 109, 255, 121, 254, 217, 163, 63, 0, 18, 140, 78, 0, 18, 46, 162, 211, 212, 83, 69, 0, 18, 134, 117, 255, 132, 100, 212, 83, 63, 1, 18, 70, 109, 8, 141, 82, 77, 8, 18, 140, 18, 146, 34, 172, 120, 255, 18, 30, 34, 162, 119, 5, 18, 150, 34, 162, 119, 15, 34, 162, 109, 3, 253, 24, 162, 211, 212, 83, 18, 134, 162, 248, 247, 51, 99, 0, 34, 182, 0, 238, 162, 248, 248, 51, 99, 50, 34, 182, 0, 238, 109, 27, 242, 101, 240, 41, 211, 213, 115, 5, 241, 41, 211, 213, 115, 5, 242, 41, 211, 213, 0, 238, 1, 124, 254, 124, 96, 240, 96, 64, 224, 160, 248, 212, 110, 1, 109, 16, 253, 24, 0, 238}

-- Block/pong something, emulation bug here?
-- game_data = {0, 224, 35, 182, 96, 7, 224, 158, 18, 4, 104, 0, 103, 3, 35, 70, 34, 74, 34, 192, 35, 102, 35, 138, 35, 172, 240, 10, 34, 90, 34, 90, 34, 208, 34, 136, 58, 0, 18, 28, 108, 1, 35, 172, 119, 255, 35, 172, 96, 120, 240, 21, 240, 7, 48, 0, 18, 52, 55, 0, 18, 28, 35, 172, 96, 7, 224, 158, 18, 66, 18, 10, 0, 253, 105, 16, 96, 2, 162, 84, 208, 149, 0, 238, 128, 128, 128, 128, 128, 0, 96, 1, 224, 161, 18, 104, 96, 4, 224, 161, 18, 114, 0, 238, 128, 144, 112, 255, 64, 0, 0, 238, 18, 124, 128, 144, 112, 1, 64, 27, 0, 238, 18, 124, 97, 2, 162, 84, 209, 149, 209, 5, 137, 0, 0, 238, 128, 160, 112, 254, 48, 0, 0, 238, 128, 176, 128, 149, 79, 0, 0, 238, 129, 0, 98, 5, 129, 37, 63, 0, 0, 238, 162, 186, 240, 30, 240, 101, 141, 0, 75, 1, 109, 1, 75, 30, 109, 255, 108, 1, 96, 10, 240, 24, 0, 238, 255, 255, 0, 1, 1, 0, 203, 32, 123, 1, 106, 4, 108, 1, 109, 1, 163, 100, 218, 177, 0, 238, 128, 160, 129, 176, 138, 196, 139, 212, 163, 100, 75, 1, 109, 1, 75, 30, 109, 255, 74, 62, 108, 255, 74, 0, 108, 1, 208, 17, 218, 177, 79, 0, 0, 238, 128, 160, 97, 33, 128, 21, 79, 0, 0, 238, 128, 160, 129, 176, 112, 222, 113, 255, 98, 255, 99, 255, 100, 3, 114, 1, 128, 69, 63, 0, 19, 10, 115, 1, 129, 69, 63, 0, 19, 18, 128, 32, 129, 48, 128, 36, 128, 36, 129, 52, 129, 52, 112, 34, 113, 1, 163, 134, 208, 19, 126, 255, 96, 0, 140, 7, 96, 2, 240, 24, 35, 138, 120, 1, 35, 138, 62, 0, 0, 238, 35, 102, 0, 238, 0, 224, 96, 0, 97, 0, 98, 31, 163, 100, 208, 17, 208, 33, 112, 1, 48, 63, 19, 80, 208, 17, 113, 1, 49, 32, 19, 90, 0, 238, 128, 0, 97, 1, 99, 10, 163, 134, 96, 34, 98, 7, 208, 19, 112, 3, 114, 255, 50, 0, 19, 112, 113, 3, 115, 255, 51, 0, 19, 108, 110, 70, 0, 238, 224, 160, 224, 0, 163, 166, 248, 51, 242, 101, 99, 3, 100, 2, 240, 41, 211, 69, 115, 5, 241, 41, 211, 69, 115, 5, 242, 41, 211, 69, 0, 238, 0, 0, 0, 0, 0, 0, 96, 20, 97, 2, 247, 41, 208, 21, 0, 238, 96, 10, 97, 12, 98, 9, 99, 5, 163, 206, 208, 21, 243, 30, 112, 5, 114, 255, 50, 0, 19, 192, 0, 238, 144, 144, 144, 144, 96, 224, 144, 224, 144, 224, 224, 144, 224, 144, 144, 32, 32, 32, 32, 32, 144, 144, 96, 144, 144, 0, 0, 96, 0, 0, 240, 144, 240, 128, 128, 240, 128, 240, 16, 240, 224, 144, 224, 144, 144}

-- pong, shows that display needs improvement
-- game_data = {106, 2, 107, 12, 108, 63, 109, 12, 162, 234, 218, 182, 220, 214, 110, 0, 34, 212, 102, 3, 104, 2, 96, 96, 240, 21, 240, 7, 48, 0, 18, 26, 199, 23, 119, 8, 105, 255, 162, 240, 214, 113, 162, 234, 218, 182, 220, 214, 96, 1, 224, 161, 123, 254, 96, 4, 224, 161, 123, 2, 96, 31, 139, 2, 218, 182, 96, 12, 224, 161, 125, 254, 96, 13, 224, 161, 125, 2, 96, 31, 141, 2, 220, 214, 162, 240, 214, 113, 134, 132, 135, 148, 96, 63, 134, 2, 97, 31, 135, 18, 70, 2, 18, 120, 70, 63, 18, 130, 71, 31, 105, 255, 71, 0, 105, 1, 214, 113, 18, 42, 104, 2, 99, 1, 128, 112, 128, 181, 18, 138, 104, 254, 99, 10, 128, 112, 128, 213, 63, 1, 18, 162, 97, 2, 128, 21, 63, 1, 18, 186, 128, 21, 63, 1, 18, 200, 128, 21, 63, 1, 18, 194, 96, 32, 240, 24, 34, 212, 142, 52, 34, 212, 102, 62, 51, 1, 102, 3, 104, 254, 51, 1, 104, 2, 18, 22, 121, 255, 73, 254, 105, 255, 18, 200, 121, 1, 73, 2, 105, 1, 96, 4, 240, 24, 118, 1, 70, 64, 118, 254, 18, 108, 162, 242, 254, 51, 242, 101, 241, 41, 100, 20, 101, 0, 212, 85, 116, 21, 242, 41, 212, 85, 0, 238, 128, 128, 128, 128, 128, 128, 128, 0, 0, 0, 0, 0}

-- OXO, weird
-- game_data = {18, 24, 84, 73, 67, 84, 65, 67, 32, 98, 121, 32, 68, 97, 118, 105, 100, 32, 87, 73, 78, 84, 69, 82, 107, 0, 108, 0, 128, 176, 129, 192, 163, 230, 241, 85, 163, 196, 255, 101, 163, 180, 255, 85, 163, 230, 241, 101, 139, 0, 140, 16, 0, 224, 110, 1, 96, 19, 97, 3, 163, 154, 208, 17, 112, 8, 48, 43, 18, 62, 96, 19, 113, 8, 49, 35, 18, 62, 96, 19, 97, 3, 163, 155, 208, 31, 112, 8, 48, 51, 18, 84, 96, 19, 113, 15, 208, 26, 112, 8, 48, 51, 18, 96, 35, 102, 240, 10, 129, 0, 163, 180, 240, 30, 240, 101, 64, 0, 18, 138, 34, 124, 18, 106, 96, 16, 240, 24, 240, 21, 240, 7, 48, 0, 18, 130, 0, 238, 96, 2, 142, 3, 128, 224, 240, 85, 163, 212, 128, 16, 112, 255, 128, 4, 240, 30, 241, 101, 163, 170, 62, 3, 163, 175, 208, 21, 34, 200, 58, 0, 18, 28, 163, 180, 97, 0, 98, 0, 99, 1, 240, 101, 48, 0, 113, 1, 243, 30, 114, 1, 50, 16, 18, 180, 49, 16, 18, 106, 18, 28, 106, 0, 163, 180, 96, 1, 240, 30, 248, 101, 105, 0, 137, 4, 35, 68, 137, 20, 35, 68, 137, 36, 35, 74, 105, 0, 137, 52, 35, 68, 137, 68, 35, 68, 137, 84, 35, 74, 105, 0, 137, 100, 35, 68, 137, 116, 35, 68, 137, 132, 35, 74, 105, 0, 137, 100, 35, 68, 137, 52, 35, 68, 137, 4, 35, 74, 105, 0, 137, 116, 35, 68, 137, 68, 35, 68, 137, 20, 35, 74, 105, 0, 137, 132, 35, 68, 137, 84, 35, 68, 137, 36, 35, 74, 105, 0, 137, 132, 35, 68, 137, 68, 35, 68, 137, 4, 35, 74, 105, 0, 137, 100, 35, 68, 137, 68, 35, 68, 137, 36, 35, 74, 0, 238, 137, 14, 137, 14, 0, 238, 73, 21, 19, 84, 73, 63, 19, 90, 0, 238, 35, 102, 123, 1, 19, 94, 35, 102, 124, 1, 35, 102, 106, 1, 240, 10, 0, 238, 99, 5, 100, 10, 163, 175, 211, 69, 99, 2, 116, 6, 163, 230, 251, 51, 35, 136, 99, 50, 100, 10, 163, 170, 211, 69, 99, 47, 116, 6, 163, 230, 252, 51, 242, 101, 240, 41, 35, 148, 241, 41, 35, 148, 242, 41, 211, 69, 115, 5, 0, 238, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 28, 34, 34, 34, 28, 34, 20, 8, 20, 34, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 19, 5, 27, 5, 35, 5, 19, 13, 27, 13, 35, 13, 19, 21, 27, 21, 35, 21}

-- 16 keys

local keys = {}
keys["0"] = 0
keys["1"] = 1
keys["2"] = 2
keys["3"] = 3
keys["4"] = 4
keys["5"] = 5
keys["6"] = 6
keys["7"] = 7
keys["8"] = 8
keys["9"] = 9
keys["a"] = 10
keys["b"] = 11
keys["c"] = 12
keys["d"] = 13
keys["e"] = 14
keys["f"] = 15

setmetatable(keys, {__index=function () return 20 end})

input = {}

function on.escapeKey() on.charIn"q" end

function on.arrowUp()    on.charIn"2" end
function on.arrowDown()  on.charIn"8" end
function on.arrowLeft()  on.charIn"4" end
function on.arrowRight() on.charIn"6" end
function on.mouseDown()  on.charIn"5" end

function on.charIn(key)
	input[keys[key]] = true
end

local mem     = {}
local reg     = {}
local stack   = {}
local display = {}

local math = math
local displaychanged = false

local dcY1, dcX1, dcY2, dcX2 = 0, 0, 31, 63

function on.construction()
	-- prepare memory
	mem = { 0xF0, 0x90, 0x90, 0x90, 0xF0, 0x20, 0x60, 0x20, 0x20, 0x70,
			0xF0, 0x10, 0xF0, 0x80, 0xF0, 0xF0, 0x10, 0xF0, 0x10, 0xF0, 0x90,
			0x90, 0xF0, 0x10, 0x10, 0xF0, 0x80, 0xF0, 0x10, 0xF0, 0xF0, 0x80,
			0xF0, 0x90, 0xF0, 0xF0, 0x10, 0x20, 0x40, 0x40, 0xF0, 0x90, 0xF0,
			0x90, 0xF0, 0xF0, 0x90, 0xF0, 0x10, 0xF0, 0xF0, 0x90, 0xF0, 0x90,
			0x90, 0xE0, 0x90, 0xE0, 0x90, 0xE0, 0xF0, 0x80, 0x80, 0x80, 0xF0,
			0xE0, 0x90, 0x90, 0x90, 0xE0, 0xF0, 0x80, 0xF0, 0x80, 0xF0, 0xF0,
			0x80, 0xF0, 0x80, 0x80 }

	local i = 0x200
	for _, byte in ipairs(game_data) do
		mem[i] = byte
		i = i + 1
	end
	
	while i < 0x1000 do
		mem[i] = 0
		i = i + 1
	end

	reg = {}
	for i = 0, 15 do
		reg[i] = 0
	end
	
	reg.I = 0
	reg.C = 0x200
	reg.D = 0
	reg.S = 0
	
	stack = {}

	display = {}
	for i = 0, 2047 do
		display[i] = false
	end

end

function cycle()
	local floor   = math.floor
	local mem     = mem
	local reg     = reg
	local stack   = stack
	local display = display
	
	local ab = mem[reg.C]
	local cd = mem[reg.C + 1]

	local op = ab * 256 + cd

	local a = floor(ab / 16)
	local b = ab % 16
	local c = floor(cd / 16)
	local d = cd % 16

	reg.C = reg.C + 2

	if op == 0x00e0 then			-- clear screen
		for i = 0, 2047 do
			display[i] = false
		end
		displaychanged = true
		dcY1, dcX1, dcY2, dcX2 = 0, 0, 31, 63

	elseif op == 0x00ee then		-- return
		local l = #stack
		reg.C = stack[l]
		stack[l] = nil

	elseif a == 1 then				-- jump
		reg.C = b * 256 + cd

	elseif a == 2 then				-- call
		stack[#stack + 1] = reg.C
		reg.C = b * 256 + cd

	elseif a == 3 then				-- skip
		if reg[b] == cd then
			reg.C = reg.C + 2
		end

	elseif a == 4 then				-- skip
		if reg[b] ~= cd then
			reg.C = reg.C + 2
		end

	elseif a == 5 and d == 0 then	-- skip
		if reg[b] == reg[c] then
			reg.C = reg.C + 2
		end

	elseif a == 6 then				-- set
		reg[b] = cd

	elseif a == 7 then				-- add
		reg[b] = (reg[b] + cd) % 256

	elseif a == 8 then
		if d == 0 then	-- set
			reg[b] = reg[c]

		elseif d == 1 then	-- or
			reg[b] = bit_or(reg[b], reg[c])

		elseif d == 2 then	-- and
			reg[b] = bit_and(reg[b], reg[c])

		elseif d == 3 then	-- xor
			reg[b] = bit_xor(reg[b], reg[c])

		elseif d == 4 then	-- add
			reg[b] = (reg[b] + reg[c]) % 256
			reg[15] = reg[b] + reg[c] >= 256 and 1 or 0

		elseif d == 5 then	-- sub
			reg[15] = reg[b] <= reg[c] and 0 or 1
			reg[b] = (reg[b] - reg[c] + 256) % 256

		elseif d == 6 then	-- shr
			reg[15] = reg[b] % 2
			reg[b] = floor(reg[b] / 2)

		elseif d == 7 then	-- subn
			reg[15] = reg[c] <= reg[b] and 0 or 1
			reg[b] = (reg[c] - reg[b] + 256) % 256

		elseif d == 0xe then	-- shr
			reg[15] = floor(reg[b] / 128)
			reg[b] = (reg[b] * 2) % 256

		else
			--print(a, b, c, d)
		end


	elseif a == 9 and d == 0 then	-- sne
		if reg[b] ~= reg[c] then
			reg.C = reg.C + 2
		end

	elseif a == 0xa then	-- sne
		reg.I = b * 256 + cd

	elseif a == 0xb then	-- jp
		reg.C = (b * 256 + cd + reg[0]) % 0x1000

	elseif a == 0xc then	-- rnd
		math.randomseed(math.random()*timer.getMilliSecCounter())
		reg[b] = bit_and(math.random(0, 255), cd)

	elseif a == 0xd then	-- drw
		local x = reg[b]
		local y = reg[c]

		reg[15] = 0
		for i = 0, d - 1 do
			local m = mem[reg.I + i]
			for j = 0, 7 do
				if bit_and(m, 2 ^ (7 - j)) > 0 then
					--local pos = (x + j) % 64 + ((y + i) % 32) * 64
					local pos = (y+i)*64+x+j

					local q = display[pos]
					if q then
						reg[15] = 1
					end
					display[pos] = not q
					displaychanged = true
					dcY1 = y < dcY1 and y or dcY1
					dcX1 = x < dcX1 and x or dcX1
					dcY2 = y+1 > dcY2 and y+1 or dcY2
					dcX2 = x+1 > dcX2 and x+1 or dcX2
					
				end
			end
		end

	elseif a == 0xe then
		if cd == 0x9e then	-- skp
			if input[reg[b]] then
				reg.C = reg.C + 2
				input[reg[b]] = false
			end

		elseif cd == 0xa1 then	-- skp
			if not input[reg[b]] then
				reg.C = reg.C + 2
			end

		else
			--print(a, b, c, d)
		end

	-- TODO: more opcodes...


	elseif a == 0xf then

		if cd == 0x07 then	-- timer
			reg[b] = reg.D
			if reg.D > 0 then
				reg.D = reg.D - 1
				return true
			end

		elseif cd == 0x0a then -- wait for key
			reg.C = reg.C - 2
			for i = 0, 15 do
				if input[i] then
					reg[b] = i
					reg.C = reg.C + 2
					input[i] = false
					break
				end
			end
		elseif cd == 0x15 then	-- timer
			reg.D = reg[b]

		elseif cd == 0x18 then	-- timer
			reg.S = reg[b]

		elseif cd == 0x1e then
			reg.I = (reg.I + reg[b]) % 0x1000


		elseif cd == 0x29 then		-- ld
			reg.I = reg[b] * 5 + 1


		elseif cd == 0x33 then		-- bcd stuff
			mem[reg.I + 0] = floor(reg[b] / 100)
			mem[reg.I + 1] = floor(reg[b] / 10) % 10
			mem[reg.I + 2] = reg[b] % 10


		elseif cd == 0x55 then		-- ld
			for i = 0, b do
				mem[reg.I + i] = reg[i]
			end
			reg.I = reg.I + b + 1

		elseif cd == 0x65 then		-- ld
			for i = 0, b do
				reg[i] = mem[reg.I + i]
			end
			reg.I = reg.I + b + 1


		else
			--print(a, b, c, d)
		end
	else
		--print(a, b, c, d)

	end

end

local counter = 0

function on.timer()
	displaychanged = false
	for i = 1, 30 do
		if cycle() then break end
	end
	
	counter = counter + 1
	if counter == 4 then
		--input = {}
		counter = 0
	end
	
	if displaychanged then
		local dcW, dcH
		if dcY1 then
			dcH = dcY2-dcY1
			dcW = dcX2-dcX1
		end
		platform.window:invalidate(dcX1*5, dcY1*5, dcW*5, dcH*5)
	end
end

function on.paint(gc)
	gc:fillRect(0,0,318,212)
	gc:setColorRGB(255,255,255)
	-- render display
	local display = display
	local fillRect = gc.fillRect
	for y=dcY1, dcY2 do	
		for x=dcX1, dcX2 do
			if display[y*64+x] then
				fillRect(gc, x * 5, y * 5, 5, 5)
			end
		end
	end


end

timer.start(0.01)
